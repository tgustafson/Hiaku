import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Scanner;


public class CountSyllables {

	public static void main(String[] args) {
		String line = "";
		
		//all words in document added to list
		LinkedList<String> wordList = new LinkedList<String>();
		
		//file being read in
		File file = new File("c:/Users/Tyler/Desktop/test.txt");
		
		String cur = "";
		String line1 = "";
		String line2 = "";
		String line3 = "";
		int sylls = 0;
		int layer = 1;
		
		try {
			//Creates a new scanner object
			Scanner scan = new Scanner(file);
			
			//while the scanned object has a next line
			//split each line into separate words to check for syllables
			//all of these words are put into the LinkedList called wordList
			while(scan.hasNextLine()){
				line = scan.nextLine();
				String [] words = line.split(" ");
				for(int i = 0; i < words.length;i++){
					wordList.add(words[i]);
				}
			}
			
			//this goes through the entire word list and checks each word
			for(int i = 0; i < wordList.size(); i++){
				
				//the first element is set to the variable cur
				cur = wordList.get(i);
				
				//the number of syllables of the word is added to the number of syllables to the current sentence
				sylls += syllCounter(cur);
				
				if(layer == 1){
					//add word to current sentence
					line1 += " " + cur;
					
					//if the current sentence's # of syllables equals 5 update the layer and reset current amount of syllables
					if(sylls == 5){
						layer = 2;
						sylls = 0;
					}
					//if sylls is greater then five reset the search
					else if(sylls > 5){
						line1 = "";
						sylls = 0;
					}
				}
				else if(layer == 2){
					//add word to current sentence
					line2 += " " + cur;
					
					//if sentence's # of syllables equals seven then update the layer and reset the # of syllables
					if(sylls == 7){
						layer = 3;
						sylls = 0;
					}
					//reset everything
					else if(sylls > 7){
						sylls = 0;
						line1 = "";
						line2 = "";
						layer = 1;
					}
				}
				else if(layer == 3){
					//add word to current sentence
					line3 += " " + cur;
					
					if(sylls == 5){
						if(line1.trim().isEmpty() || line2.trim().isEmpty() || line3.trim().isEmpty()){
							//do not print out empty hiaku
							sylls = 0;
							line1 = "";
							line2 = "";
							line3 = "";
							layer = 1;
						}
						System.out.println(line1 + "\n" + line2 + "\n" + line3 + "\n");
						//after you print out the hiaku reset everything
						sylls = 0;
						line1 = "";
						line2 = "";
						line3 = "";
						layer = 1;
					}
					//reset everything
					else if(sylls > 5){
						sylls = 0;
						line1 = "";
						line2 = "";
						line3 = "";
					}
				}
			}
			scan.close();
		} 
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public static int syllCounter(String x){
		int num = 0;
		x = x.toLowerCase();
		if(x.contains("a")){
			return 1;
		}
		for(int i = 0; i < x.length()-1; i++){
			//one syllable for each number
			if(Character.isDigit(x.charAt(i)) == true){
				return 1;
			}			
			//check for vowels
			if(x.charAt(i) == 'a' || x.charAt(i) == 'i' || x.charAt(i) == 'o' || x.charAt(i) == 'u' || x.charAt(i)  == 'e'){
				num++;
				//specific rules for the e vowel
				if(i != 0 && x.charAt(i) == 'e' && (x.charAt(i-1) == 'a' || x.charAt(i-1) == 'i' || x.charAt(i-1) == 'o' || x.charAt(i-1) == 'u')){
					num--;
					if(i < 1 && (x.charAt(i-2) == 'a' || x.charAt(i-2) == 'i' || x.charAt(i-2) == 'o' || x.charAt(i-2) == 'u')){
						num++;
					}
					//checks for 'ed' ending of word
					else if(i == x.length()-2 && x.charAt(x.length()-1) == 'd'){
						num--;
					}
					//checks for 'er' ending of word
					else if(i == x.length()-2 && x.charAt(x.length()-1) == 'r'){
						num++;
					}
					
					else if(i < 2 && x.charAt(i) == 'e' && (x.charAt(i-2) == 'a' || x.charAt(i-2) == 'i' || x.charAt(i-2) == 'o' || x.charAt(i-2) == 'u')){
						num--;
					}
				}
			}
			 if(i == x.length() && x.charAt(i) == 'y'){
				num++;
			}	
		}
		//every word is at least one syllable
		if(num == 0){
			return 1;
		}
		return num;
}
}
